<h2>Overview</h2>
<a id="page-heading" class="anchor" tabindex="-1"></a>

<p>This adaptive grid system uses a single container, row(s), and column(s) to layout and align content.
  A mobile-first flexbox grid system based on the CSS flex display property.</p>

<ul>
  <li>A container provides a means to center your site's contents. Use <code>.l-container</code> for fixed width.</li>
  <li>Content should be placed within columns, and only columns may be immediate children of rows.</li>
  <li>There are <strong>four grid tiers</strong>, one for each responsive breakpoint: all breakpoints
    (extra small), small, medium, and large.</li>
  <li>It supports different column counts for each of the grid tiers.
    Which are extra-small (1), small (8), medium (12), and large (16).</li>
  <li>Grid tiers are based on minimum widths, meaning they apply to that one tier and all those above it
    (e.g., <code>.l-col-sm-4</code> applies to small, medium, and large devices).</li>
  <li><strong>Unlike Bootstrap</strong> grid, which is percentage based, TGAM flexboxgrid <strong>columns are fixed width.</strong>
  Which allows easier nesting, but also forces you to explicitly define that columns width for each tier.</li>
</ul>

<p>Be aware of the limitations and <a href="https://github.com/philipwalton/flexbugs">bugs around flexbox</a>,
  like the <a href="https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers">inability
  to use some HTML elements as flex containers</a>.</p>

<h3>Containers</h3>
<a id="o-containers" class="anchor"></a>

<p>Containers are the most basic layout element and are <strong>required</strong> when using the grid system.
  <strong>Containers are fixed-width</strong>, meaning its <code>max-width</code> changes/adapts at each breakpoint,
  to a pre-determined fixed-width.</p>
<p>Containers <strong>should not be nested</strong>. You only require a single parent container.
  Resize your screen to see how the container adapts when between breakpoints.</p>
<div class="l-container--debug">
  {{> overview/containers-fixed}}
</div>
{{> overview/containers-fixed-code}}

<h3>Consistent fixed-width columns</h3>
<a id="o-fluid-grid" class="anchor"></a>

<p>Pixel based widths allow consistent column sizes regardless of grid nesting.
  However, you need to he explicit for each grid tier. If you don't specify the current tier,
  then the next smaller tier's column width will be used instead.</p>
<p>This could be also be desired behaviour, depending on what you were trying to accomplish.
  But as you see below, those columns may not align with the current grid tier's columns.</p>
<div class="l-container--debug">
  {{> overview/fluid-grid}}
</div>
{{> overview/fluid-grid-code}}

<h3>Responsive modifiers</h3>
<a id="o-responsive-modifiers" class="anchor"></a>

<p>Responsive modifiers enable specifying different column sizes, offsets, alignment and distribution at xs, sm, md &amp; lg viewport widths.</p>
<div class="l-container--debug">
  {{> overview/responsive-modifiers}}
</div>
{{> overview/responsive-modifiers-code}}

<h3>Responsive column counts</h3>
<a id="o-responsive-grid" class="anchor"></a>

<p>Each of the 4 breakpoint tiers has a different column count. Extra-small (1), small (8), medium (12), large (16).</p>
<div class="l-container--debug">
  {{> overview/responsive-grid}}
</div>
{{> overview/responsive-grid-code}}


<h3>Customizing the grid</h3>
<a id="o-custom" class="anchor"></a>

<p>Using our built-in grid Sass <code>_variables.scss</code> and maps, it’s possible to completely customize the
predefined grid classes. Change the number of tiers, the media query dimensions,
and the container widths—then recompile.</p>

<h4>Columns and gutters</h4>
<a id="o-gutters" class="anchor"></a>

<p>The number of grid columns and their horizontal padding (aka, gutters) can be modified via Sass variables.
  <code>$grid-columns</code> is used to generate the widths (in pixels) of each individual column while
  <code>$grid-gutter-width-base</code> sets padding-left and padding-right for the column gutters.</p>

{{> overview/grid-columns-scss}}

<h4>Grid tier sizes</h4>
<a id="o-tiers" class="anchor"></a>

<p>Moving beyond the columns themselves, you may also customize the tier sizes themselves.
You can do so by updating the below Sass variables to:</p>

{{> overview/grid-breakpoints-scss}}

<p>When making any changes to the Sass variables or maps, you’ll need to save your
  changes and recompile. Doing so will out a brand new set of predefined grid
  classes for column widths, offsets, pushes, and pulls. Responsive visibility
  utilities will also be updated to use the custom breakpoints.</p>

<h4>Grid summary table</h4>
<a id="o-summary-table" class="anchor"></a>

<p>See how aspects of the grid system work across multiple devices with a handy table.</p>

{{> overview/grid-table}}

<h4>Disable/exclude features</h4>
<a id="o-exclude" class="anchor"></a>

<p>In the <code>_variables.scss</code> file.
  Disable any of the below (undesired) features to reduce the grid bundle size.</p>

<p>For details, refer to:
     <a href="{{basePath}}/util/#u-visibility">Visibility classes</a>,
  or <a href="{{basePath}}/util/#u-display">display classes</a>,
  or <a href="{{basePath}}/util/#u-flexbox">flexbox classes</a>,
  or <a href="{{basePath}}/grid/#grid">various grid classes</a>.</p>

{{> overview/grid-exclude-scss}}

<h3>Responsive breakpoint mixins</h3>
<a id="o-resp-mixins" class="anchor"></a>

<p>Since the grid is developed to be mobile first, we use a handful of media queries to create sensible
breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths
and allow us to scale up elements as the viewport changes.</p>

<p>The grid primarily uses the following media query ranges—or breakpoints—in our source
Sass files for our layout, grid system, and components.</p>

<p>Since we write our source CSS in Sass, all our media queries are available via Sass mixins:</p>

{{> overview/resp-breakpoints-up-scss}}

<p>We occasionally use media queries that go in the other direction (the given screen size or smaller).
  Once again, these media queries are also available via Sass mixins:</p>

{{> overview/resp-breakpoints-down-scss}}

<p>There are also media queries and mixins for targeting a single segment of screen sizes
  using the minimum and maximum breakpoint widths.
  These media queries are also available via Sass mixins:</p>

{{> overview/resp-breakpoints-only-scss}}

<p>Similarly, media queries may span multiple breakpoint widths.
The Sass mixin for targeting the same screen size range would be:</p>

{{> overview/resp-breakpoints-between-scss}}
