// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> grid-breakpoint-next(sm)
//    md
//    >> grid-breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px))
//    md
//    >> grid-breakpoint-next(sm, $breakpoint-names: (xs sm md lg))
//    md
@function grid-breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> grid-breakpoint-min(sm, _(xs: 0, sm: 576px, md: 768px, lg: 992px))
//    576px
@function grid-breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> grid-breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px))
//    767px
@function grid-breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: grid-breakpoint-next($name, $breakpoints);
  @return if($next, grid-breakpoint-min($next, $breakpoints) - .01rem, null); // similiar to sass-mq value
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> grid-breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px))
//    ""  (Returns a blank string)
//    >> grid-breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px))
//    "-sm"
@function grid-breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(grid-breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin grid-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: grid-breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin grid-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: grid-breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin grid-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include grid-breakpoint-up($lower, $breakpoints) {
    @include grid-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin grid-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include grid-breakpoint-between($name, $name, $breakpoints) {
    @content;
  }
}
