// For each breakpoint, define the container properties and padding
@mixin grid-make-container($paddings: $grid-paddings, $breakpoints: $grid-breakpoints, $gutter: $grid-gutter-width-base) {
  margin-left: auto;
  margin-right: auto;

  // if the same element is a container and a row,
  // then do not have negative margins on this row/container element.
  &.l-row {
    margin-left: auto;
    margin-right: auto;
  }

  // if a row is an immediate child of a container,
  // then do not have negative margins on that child row element.
  >.l-row {
    margin-left: 0;
    margin-right: 0;
  }

  // add optional left/right edge padding to container
  @each $breakpoint in map-keys($paddings) {
    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      padding-left:  map-get($paddings, $breakpoint);
      padding-right: map-get($paddings, $breakpoint);
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin grid-make-container-max-widths($sizes: $grid-sizes, $breakpoints: $grid-breakpoints, $gutter: $grid-gutter-width-base) {
  @each $breakpoint, $size in $sizes {
    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      width: $size + $gutter;
      max-width: 100%;
    }
  }
}

@mixin grid-make-gutters($gutter: $grid-gutter-width-base) {
  @if ($grid-gutter-width-base > 0) {
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}

@mixin grid-make-row($gutter: $grid-gutter-width-base) {
  display: flex;
  flex-wrap: wrap;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
}

// When not XS tier, return non-percentage value (in order to more easily nest grids).
// $size is the desired column count
// $columns is the max total
// $breakpoint is this tier namespace
// $gutter is the global value for column spacing
// $max is the maximum grid tier width
@function grid-percentage($size, $columns, $breakpoint, $gutter: $grid-gutter-width-base) {
  $max: map-get($grid-sizes, $breakpoint);
  @if $max == null {
    @return percentage($size / $columns);
  } @else {
    @return (((($max + $gutter) / $columns) * $size));
  }
}

@mixin grid-make-col($size, $columns, $breakpoint) {
  flex: 0 0 grid-percentage($size, $columns, $breakpoint);
  // width: grid-percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: grid-percentage($size, $columns, $breakpoint);
}

@mixin grid-make-col-offset($size, $columns, $breakpoint) {
  margin-left: grid-percentage($size, $columns, $breakpoint);
}

@mixin grid-make-col-push($size, $columns, $breakpoint) {
  left: if($size > 0, grid-percentage($size, $columns, $breakpoint), auto);
}

@mixin grid-make-col-pull($size, $columns, $breakpoint) {
  right: if($size > 0, grid-percentage($size, $columns, $breakpoint), auto);
}

@mixin grid-make-col-modifier($type, $size, $columns, $breakpoint) {
  @if $grid-include-grid-push and $type == push {
    @include grid-make-col-push($size, $columns, $breakpoint);

  } @else if $grid-include-grid-pull and $type == pull {
    @include grid-make-col-pull($size, $columns, $breakpoint);

  } @else if $grid-include-grid-offset and $type == offset {
    @include grid-make-col-offset($size, $columns, $breakpoint);
  }
}

@mixin grid-make-grid-columns($g-columns: $grid-columns, $gutter: $grid-gutter-width-base, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty

    @include grid-make-gutters($gutter);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: grid-breakpoint-infix($breakpoint, $breakpoints);
    $columns: map-get($g-columns, $breakpoint);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .l-col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .l-col#{$infix} {
      @extend %grid-column;
    }

    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.l-col-{bp}` classes for equal-width flexbox columns
      .l-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .l-col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
      }

      @for $i from 1 through $columns {
        .l-col#{$infix}-#{$i} {
          @include grid-make-col($i, $columns, $breakpoint);
        }
      }

      // push and pull columns
      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .l-#{$modifier}#{$infix}-#{$i} {
            @include grid-make-col-modifier($modifier, $i, $columns, $breakpoint)
          }
        }
      }

      // offsetting a column
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-xs-0
          .l-offset#{$infix}-#{$i} {
            @include grid-make-col-modifier(offset, $i, $columns, $breakpoint)
          }
        }
      }
    }
  }
}

@mixin grid-make-container-debug() {
  outline: 1px solid rgba(222, 100, 92, 0.4);
}

@mixin grid-make-container-overlay($breakpoints: $grid-breakpoints, $sizes: $grid-sizes, $columns: $grid-columns, $gutter: $grid-gutter-width-base) {
  position: relative;
  &::before {
    content: "";
    opacity: 0.2;
    display: block;
    height: 100%;
    width: 100%;
    position: absolute;
    top: 0;
    left: $gutter / 2;
    z-index: 1;
    background-repeat: repeat;
    background-position: top left;
    pointer-events: none; // prevent inspector from via mouse click
  }
  @each $breakpoint in map-keys($breakpoints) {
    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      @if map-has-key($sizes, $breakpoint) { // exclude xs tier
        $size: map-get($sizes, $breakpoint); // max tier container width
        $cols: map-get($columns, $breakpoint); // total column count
        $col: ($size - ($gutter * ($cols - 1))) / $cols; // calc column width
        // use linear gradient to create grid columns
        &::before {
          background-size: ($col + $gutter) 24px;
          background-image: linear-gradient(to right, #E9CBD5 0, #E9CBD5 $col, transparent $col);
        }
      }
    }
  }
}

@mixin grid-make-row-debug() {
  margin-top: 16px;
  margin-bottom: 16px;
  outline: 1px solid rgba(118, 203, 68, 0.4);
  > .l-col,
  > [class*="l-col-"] {
    @include grid-make-col-debug();
  }
}

@mixin grid-make-col-debug() {
  // only outline column if there is no gutters
  @if ($grid-gutter-width-base == 0) {
    outline: 1px solid rgba(104, 138, 224, 0.4);
  }
  background-clip: content-box; // exclude padding from bg-color
  background-color: rgba(104, 138, 224, 0.2);
}
