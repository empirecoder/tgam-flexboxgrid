// For each breakpoint, define the container properties and padding
@mixin make-container($gutter: $grid-gutter-width-base) {
  margin-left: auto;
  margin-right: auto;

  // add left/right edge padding to xs grid container only
  @if $include-container-padding {
    @include media-breakpoint-down(xs, $grid-breakpoints) {
      @include make-gutters($gutter);
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $grid-containers, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      width: $container-max-width;
      max-width: 100%;
    }
  }
}

@mixin make-gutters($gutter: $grid-gutter-width-base) {
  @if ($grid-gutter-width-base > 0) {
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}

@mixin make-row($gutter: $grid-gutter-width-base) {
  display: flex;
  flex-wrap: wrap;

  @if ($grid-gutter-width-base > 0) {
    @include media-breakpoint-up(sm, $grid-breakpoints) {
      margin-left:  ($gutter / -2);
      margin-right: ($gutter / -2);
    }
  }
}

@mixin make-col($size, $columns) {
  flex: 0 0 percentage($size / $columns);
  // width: percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  @if $include-grid-push and $type == push {
    @include make-col-push($size, $columns);

  } @else if $include-grid-pull and $type == pull {
    @include make-col-pull($size, $columns);

  } @else if $include-grid-offset and $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin make-grid-columns($g-columns: $grid-columns, $gutter: $grid-gutter-width-base, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty

    @include make-gutters($gutter);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    $columns: map-get($g-columns, $breakpoint);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .l-col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .l-col#{$infix} {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.l-col-{bp}` classes for equal-width flexbox columns
      .l-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .l-col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
      }

      @for $i from 1 through $columns {
        .l-col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      // push and pull columns
      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .l-#{$modifier}#{$infix}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
      }

      // offsetting a column
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-xs-0
          .l-offset#{$infix}-#{$i} {
            @include make-col-modifier(offset, $i, $columns)
          }
        }
      }
    }
  }
}

@mixin make-container-debug() {
  overflow: hidden;
  outline: 1px solid rgba(222, 100, 92, 0.4);
}

@mixin make-row-debug() {
  margin-top: 16px;
  margin-bottom: 16px;
  outline: 1px solid rgba(118, 203, 68, 0.4);
  > .l-col,
  > [class*="l-col-"] {
    @include make-col-debug();
  }
}

@mixin make-col-debug() {
  // only outline column if there is no gutters
  @if ($grid-gutter-width-base == 0) {
    outline: 1px solid rgba(104, 138, 224, 0.4);
  }
  background-clip: content-box; // exclude padding from bg-color
  background-color: rgba(104, 138, 224, 0.2);
}
