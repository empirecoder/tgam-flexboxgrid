// This mixin is specifically for #pb-root in PageBuilder.
// Create a container and row like element, without negative left/right margins
@mixin grid-make-root() {
  @include grid-make-container();
  @include grid-make-container-max-widths();
  @include grid-make-flex();
}

// For each breakpoint, define the container properties and padding
@mixin grid-make-container($paddings: $grid-paddings, $breakpoints: $grid-breakpoints,
  $gutter: $grid-gutter-width-base) {
  margin-left: auto;
  margin-right: auto;

  // if a row is an immediate child of a container,
  // then do not have negative margins on that child row element.
  >.l-row {
    margin-left: 0;
    margin-right: 0;
  }

  // add optional left/right edge padding to container
  @each $breakpoint in map-keys($paddings) {
    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      padding-left:  map-get($paddings, $breakpoint);
      padding-right: map-get($paddings, $breakpoint);
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query.
// Also define a min-width, since this is an adaptive (and not responsive) grid.
// This is a fix for desktop browsers which have scrollbars, that occupy typically 16px width.
@mixin grid-make-container-max-widths($sizes: $grid-sizes, $breakpoints: $grid-breakpoints,
  $gutter: $grid-gutter-width-base) {
  @each $breakpoint, $size in $sizes {
    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      min-width: $size + $gutter;
      width: $size + $gutter;
      max-width: 100%;
    }
  }
}

@mixin grid-make-row($gutter: $grid-gutter-width-base) {
  display: flex;
  flex-wrap: wrap;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin grid-make-flex() {
  display: flex;
  flex-wrap: wrap;
}

// When not XS tier, return non-percentage value (in order to more easily nest grids).
// $size is the desired column count
// $columns collection contains tier max column counts
// $breakpoint is this tier namespace
// $gutter is the global value for column spacing
// $max is the maximum grid tier width
@function grid-width-fixed($size, $columns, $breakpoint, $gutter: $grid-gutter-width-base) {
  $max: map-get($grid-sizes, $breakpoint);
  @if $max == null {
    @return percentage($size / $columns);
  } @else {
    @return ($size / $columns) * ($max + $gutter);
  }
}

// Apply styles to make an element grid column ready
// Everything but the width of the column is applied
@mixin grid-make-col-ready($gutter: $grid-gutter-width-base) {
  @include grid-make-gutters($gutter);
  position: relative;
  width: 100%;
  min-height: 1px; // Prevent columns from collapsing when empty
}

// Apply default gutter padding to a column
@mixin grid-make-gutters($gutter: $grid-gutter-width-base) {
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}

// Apply a fixed column width (PX unit)
// For normal column creation, which are related to grid column counts.
@mixin grid-make-col-fixed($size, $columns, $breakpoint) {
  flex: 0 0 grid-width-fixed($size, $columns, $breakpoint);
  max-width: grid-width-fixed($size, $columns, $breakpoint);
}

// Apply a percentage column width (% unit)
// For custom column creation, which are related to grid column counts.
@mixin grid-make-col-percentage($size, $columns, $breakpoint) {
  $max: map-get($columns, $breakpoint);
  flex: 0 0 percentage($size / $max);
  max-width: percentage($size / $max);
}

// Apply a fixed bleed to the left and right margin of element.
// In order to make the column match a desired column (rem) width.
@mixin grid-make-col-bleed($current, $desired, $breakpoint, $gutter: $grid-gutter-width-base) {
  $bleed: grid-width-bleed($current, $desired, $breakpoint, $gutter);
  margin-left: rem(-$bleed);
  margin-right: rem(-$bleed);
}

// Calc the bleed for an element out of a column, but align it with a larger column width.
// $current is the current column count within the $breakpoint tier
// $desired is the desired column count within the $breakpoint tier
// $breakpoint is the tier to use for current/desired calculations
// $gutter is the grid gutter width
@function grid-width-bleed($current, $desired, $breakpoint, $gutter: $grid-gutter-width-base) {
  $columns: map-get($grid-columns, $breakpoint);
  $current-width: grid-width-fixed($current, $columns, $breakpoint) - ($gutter * 2);
  $desired-width: grid-width-fixed($desired, $columns, $breakpoint) - ($gutter * 2);
  $bleed: ($desired-width - $current-width) / 2;
  @return $bleed;
}

// Apply a fixed bleed to the left and right margin of element.
// In order to make the column match a desired viewport (vw) width.
@mixin grid-make-col-vw($vwidth, $current, $breakpoint, $gutter: $grid-gutter-width-base) {
  $columns: map-get($grid-columns, $breakpoint);
  $current-width: grid-width-fixed($current, $columns, $breakpoint) - ($gutter * 2);
  width: #{$vwidth}vw;
  margin-left: calc(-#{$vwidth / 2}vw + #{$current-width / 2});
  margin-right: calc(-#{$vwidth / 2}vw + #{$current-width / 2});
}

// Apply a custom fixed column width (PX unit)
// For very custom column creation, which are NOT related to grid column counts.
@mixin grid-make-col-custom($width) {
  flex: 0 0 $width;
  max-width: $width;
}

// Apply a percentage column width (% unit)
// For custom column creation, which aren't related to grid column counts.
@mixin grid-make-col-percent($size, $max) {
  flex: 0 0 percentage($size / $max);
  max-width: percentage($size / $max);
}

@mixin grid-make-col-offset($size, $columns, $breakpoint) {
  margin-left: grid-width-fixed($size, $columns, $breakpoint);
}

@mixin grid-make-col-push($size, $columns, $breakpoint) {
  left: if($size > 0, grid-width-fixed($size, $columns, $breakpoint), auto);
}

@mixin grid-make-col-pull($size, $columns, $breakpoint) {
  right: if($size > 0, grid-width-fixed($size, $columns, $breakpoint), auto);
}

@mixin grid-make-col-modifier($type, $size, $columns, $breakpoint) {
  @if $grid-include-grid-push and $type == push {
    @include grid-make-col-push($size, $columns, $breakpoint);

  } @else if $grid-include-grid-pull and $type == pull {
    @include grid-make-col-pull($size, $columns, $breakpoint);

  } @else if $grid-include-grid-offset and $type == offset {
    @include grid-make-col-offset($size, $columns, $breakpoint);
  }
}

@mixin grid-make-grid-columns($g-columns: $grid-columns, $gutter: $grid-gutter-width-base,
  $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    @include grid-make-col-ready($gutter);
  }

  // Can be used to help create columns with custom percentage or fixed widths
  .l-col-ready {
    @extend %grid-column;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: grid-breakpoint-infix($breakpoint, $breakpoints);
    $columns: map-get($g-columns, $breakpoint);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .l-col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .l-col#{$infix} {
      @extend %grid-column;
    }

    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.l-col-{bp}` classes for equal-width flexbox columns
      .l-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .l-col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
      }

      @for $i from 1 through $columns {
        .l-col#{$infix}-#{$i} {
          @include grid-make-col-fixed($i, $columns, $breakpoint);
        }
      }

      // push and pull columns
      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .l-#{$modifier}#{$infix}-#{$i} {
            @include grid-make-col-modifier($modifier, $i, $columns, $breakpoint)
          }
        }
      }

      // offsetting a column
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-xs-0
          .l-offset#{$infix}-#{$i} {
            @include grid-make-col-modifier(offset, $i, $columns, $breakpoint)
          }
        }
      }
    }
  }
}

@mixin grid-make-container-debug() {
  outline: 1px solid rgba(222, 100, 92, 0.4);
}

@mixin grid-make-container-overlay($breakpoints: $grid-breakpoints,
  $sizes: $grid-sizes,
  $columns: $grid-columns,
  $gutter: $grid-gutter-width-base,
  $colors: $grid-colors) {
  position: relative;
  &::before {
    content: "";
    opacity: 0.4;
    display: block;
    height: 100%;
    width: 100%;
    position: absolute;
    top: 0;
    left: $gutter / 2;
    z-index: 1;
    background-repeat: repeat;
    background-position: top left;
    pointer-events: none; // prevent inspector from via mouse click
  }
  @each $breakpoint in map-keys($breakpoints) {
    @include grid-breakpoint-up($breakpoint, $breakpoints) {
      @if map-has-key($sizes, $breakpoint) { // exclude xs tier
        $size: map-get($sizes, $breakpoint); // max tier container width
        $cols: map-get($columns, $breakpoint); // total column count
        $col: ($size - ($gutter * ($cols - 1))) / $cols; // calc column width
        $color: map-get($colors, $breakpoint); // overlay color for column
        // use linear gradient to create grid columns
        &::before {
          background-size: ($col + $gutter) 24px;
          background-image: linear-gradient(to right, $color 0, $color $col, transparent $col);
        }
      }
    }
  }
}

@mixin grid-make-row-debug() {
  margin-top: 16px;
  margin-bottom: 16px;
  outline: 1px solid rgba(118, 203, 68, 0.4);
  > .l-col,
  > [class*="l-col-"] {
    @include grid-make-col-debug();
  }
}

@mixin grid-make-col-debug() {
  // only outline column if there is no gutters
  @if ($grid-gutter-width-base == 0) {
    outline: 1px solid rgba(104, 138, 224, 0.4);
  }
  background-clip: content-box; // exclude padding from bg-color
  background-color: rgba(104, 138, 224, 0.2);
}
